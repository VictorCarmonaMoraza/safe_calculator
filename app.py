'''try:
    num = int(input("Enter a number: "))
    resultado = 10 / num
    print(resultado)
except ZeroDivisionError:
    print("Error: No se permiten las divisiones por cero")
except ValueError:
    print("Error: Invalid input. Please enter a valid number")'''

# üß† Ejemplo completo de manejo de excepciones en Python
# Incluye los bloques: try, except, else y finally
# -----------------------------------------------------

## Parte 2
try:
    # 1Ô∏è‚É£ Solicitamos al usuario que introduzca un n√∫mero
    # La funci√≥n input() devuelve una cadena (string),
    # por eso usamos int() para convertirla a n√∫mero entero.
    # Si el usuario introduce algo no num√©rico, se generar√° un ValueError.
    num = int(input("Introduce un numero: "))

    # 2Ô∏è‚É£ Intentamos realizar una operaci√≥n que puede fallar:
    # dividir 10 entre el n√∫mero introducido.
    # Si el n√∫mero es 0, se lanzar√° una excepci√≥n de tipo ZeroDivisionError.
    result = 10 / num

    # 3Ô∏è‚É£ Si no se produce ninguna excepci√≥n, se muestra el resultado.
    print("Resultado: ", result)

# ‚ö†Ô∏è 4Ô∏è‚É£ Bloque except
# Este bloque captura un error espec√≠fico: ZeroDivisionError.
# Es decir, si el usuario introduce 0, no se detendr√° el programa,
# sino que mostrar√° el mensaje personalizado de error.
except ZeroDivisionError:
    print("Error: Division por cero no esta permitido. ")

# ‚úÖ 5Ô∏è‚É£ Bloque else
# Este bloque se ejecuta √∫nicamente si NO ocurre ninguna excepci√≥n en el try.
# Es √∫til para confirmar que todo ha salido correctamente.
else:
    print("No ocurrio ninguna excepcion.  Resultado: ", result)

# üîö 6Ô∏è‚É£ Bloque finally
# Este bloque se ejecuta SIEMPRE, ocurra o no una excepci√≥n.
# Se suele usar para cerrar archivos, liberar recursos o mostrar un mensaje final.
finally:
    print("Bloque ejecutado. Programa terminado")

